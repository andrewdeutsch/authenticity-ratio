#!/usr/bin/env python3
"""
Standalone test for OpenAI ChatClient - minimal dependencies.

This test can run without importing the full AR project modules.

Usage:
    # Set your OpenAI API key
    export OPENAI_API_KEY=sk-...

    # Run the test
    python scripts/test_llm_standalone.py
"""

import os
import sys


def test_provenance_helper():
    """Test provenance helper inline."""
    print("=" * 70)
    print("TEST 1: Provenance Helper Function")
    print("=" * 70)

    def add_llm_provenance(text: str, model: str) -> str:
        """Add provenance label to text."""
        if not text or not text.strip():
            return text
        text = text.strip()
        if text.endswith(')') and '(Generated by' in text[-50:]:
            return text
        return f"{text} (Generated by {model})"

    # Test cases
    text = "This is a test summary."
    result = add_llm_provenance(text, "gpt-3.5-turbo")
    print(f"✓ Basic: {result}")
    assert "(Generated by gpt-3.5-turbo)" in result

    result2 = add_llm_provenance(result, "gpt-3.5-turbo")
    assert result2.count("Generated by") == 1
    print(f"✓ Duplicate prevention works")

    print("\n✅ Provenance helper tests passed!\n")
    return True


def test_openai_import():
    """Test if OpenAI package is available."""
    print("=" * 70)
    print("TEST 2: OpenAI Package Check")
    print("=" * 70)

    try:
        from openai import OpenAI
        print("✓ OpenAI package is installed")
        return True
    except ImportError as e:
        print(f"✗ OpenAI package not found: {e}")
        print("\n📦 To install: pip install openai")
        return False


def test_api_key():
    """Test if API key is configured."""
    print("\n" + "=" * 70)
    print("TEST 3: API Key Configuration")
    print("=" * 70)

    api_key = os.getenv('OPENAI_API_KEY')

    if not api_key:
        print("✗ No OPENAI_API_KEY found in environment")
        print("\n🔑 To configure:")
        print("   1. Get your key from: https://platform.openai.com/api-keys")
        print("   2. Set it: export OPENAI_API_KEY=sk-...")
        print("   3. Or create .env file with: OPENAI_API_KEY=sk-...")
        return False

    # Basic validation
    if not api_key.startswith('sk-'):
        print(f"⚠️  API key doesn't look valid (should start with 'sk-')")
        print(f"   Current value: {api_key[:10]}...")
        return False

    print(f"✓ API key found: {api_key[:7]}...{api_key[-4:]}")
    return True


def test_chat_client():
    """Test ChatClient initialization and basic usage."""
    print("\n" + "=" * 70)
    print("TEST 4: ChatClient Initialization")
    print("=" * 70)

    try:
        from openai import OpenAI
    except ImportError:
        print("⏭️  Skipped (OpenAI package not installed)")
        return None

    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("⏭️  Skipped (No API key configured)")
        return None

    try:
        client = OpenAI(api_key=api_key)
        print("✓ OpenAI client initialized")

        # Test a simple completion
        print("\nTesting chat completion...")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": "Say 'test successful' in exactly 2 words"}
            ],
            max_tokens=10,
            temperature=0.1
        )

        content = response.choices[0].message.content
        print(f"✓ Response: {content}")
        print(f"✓ Tokens used: {response.usage.total_tokens}")

        print("\n✅ ChatClient test passed!\n")
        return True

    except Exception as e:
        print(f"✗ ChatClient test failed: {e}")
        return False


def test_summarization():
    """Test text summarization."""
    print("=" * 70)
    print("TEST 5: Text Summarization")
    print("=" * 70)

    try:
        from openai import OpenAI
    except ImportError:
        print("⏭️  Skipped (OpenAI package not installed)")
        return None

    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("⏭️  Skipped (No API key configured)")
        return None

    try:
        client = OpenAI(api_key=api_key)

        text = """
        The Authenticity Ratio measures authentic versus inauthentic brand content.
        It uses five dimensions: Provenance, Verification, Transparency, Coherence,
        and Resonance to score content and classify it as Authentic, Suspect, or
        Inauthentic.
        """

        print(f"Original text: {text.strip()}")
        print("\nGenerating summary...")

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": f"Summarize this in 15-20 words:\n{text}"}
            ],
            max_tokens=50,
            temperature=0.3
        )

        summary = response.choices[0].message.content
        print(f"✓ Summary: {summary}")

        # Add provenance
        summary_with_prov = f"{summary} (Generated by gpt-3.5-turbo)"
        print(f"✓ With provenance: {summary_with_prov}")

        print("\n✅ Summarization test passed!\n")
        return True

    except Exception as e:
        print(f"✗ Summarization test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    print("\n" + "=" * 70)
    print("🧪 OpenAI ChatClient Standalone Test Suite")
    print("=" * 70)
    print()

    results = {}

    # Test 1: Provenance helper (no dependencies)
    try:
        results['provenance'] = test_provenance_helper()
    except Exception as e:
        print(f"✗ Provenance test failed: {e}\n")
        results['provenance'] = False

    # Test 2: OpenAI package check
    try:
        results['openai_pkg'] = test_openai_import()
    except Exception as e:
        print(f"✗ Package check failed: {e}\n")
        results['openai_pkg'] = False

    # Test 3: API key check
    try:
        results['api_key'] = test_api_key()
    except Exception as e:
        print(f"✗ API key check failed: {e}\n")
        results['api_key'] = False

    # Test 4: ChatClient
    try:
        results['chat_client'] = test_chat_client()
    except Exception as e:
        print(f"✗ ChatClient test failed: {e}\n")
        results['chat_client'] = False

    # Test 5: Summarization
    try:
        results['summarization'] = test_summarization()
    except Exception as e:
        print(f"✗ Summarization test failed: {e}\n")
        results['summarization'] = False

    # Summary
    print("=" * 70)
    print("📊 TEST SUMMARY")
    print("=" * 70)

    for test_name, result in results.items():
        if result is True:
            status = "✅ PASS"
        elif result is False:
            status = "❌ FAIL"
        else:
            status = "⏭️  SKIP"
        print(f"{status:12} {test_name}")

    print("=" * 70)

    passed = sum(1 for v in results.values() if v is True)
    failed = sum(1 for v in results.values() if v is False)
    skipped = sum(1 for v in results.values() if v is None)

    print(f"Passed: {passed} | Failed: {failed} | Skipped: {skipped}")

    # Provide guidance based on results
    if not results.get('openai_pkg'):
        print("\n📦 NEXT STEP: Install OpenAI package")
        print("   pip install openai")
    elif not results.get('api_key'):
        print("\n🔑 NEXT STEP: Configure API key")
        print("   1. Get key from: https://platform.openai.com/api-keys")
        print("   2. export OPENAI_API_KEY=sk-...")
    elif failed > 0:
        print("\n❌ Some tests failed - see errors above")
        sys.exit(1)
    elif passed > 0 and skipped == 0:
        print("\n✅ All tests passed! ChatClient is ready to use.")
    else:
        print("\n⚠️  Some tests were skipped")

    print()


if __name__ == '__main__':
    main()
